# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-bJsvYdwbgu3BFJeEP7zT6qb8VkT6Uwr
"""



import os
import cv2
import matplotlib.pyplot as plt
import numpy as np


def warp(img, UpSampFactor):

    rad = 32
    rad = rad * 1.414

    width_to_height = 3

    cent_x = img.shape[1] / 2
    cent_y = img.shape[0] / 2

    new_siz = np.ceil((2 * rad + 1) * UpSampFactor)

    X, Y = np.meshgrid(np.arange(0, new_siz), np.arange(0, new_siz))

    X = 2 * X / new_siz - 1
    Y = 2 * Y / new_siz - 1
    

    X = X * (width_to_height-1)
    Y = Y * width_to_height

    rho0 = np.sqrt(X**2 + Y**2)
    phi0 = np.angle(X + 1j * Y)

    s0 = 4 * rad * rho0 * (-1 + (1 + 3 * (1 + rho0**2))**0.5) / (8 * (1 + rho0**2))

    X_res = cent_x + s0 * np.cos(phi0)
    Y_res = cent_y + s0 * np.sin(phi0)

    if len(img.shape) == 2:  # 灰度图像
        im_warp = np.zeros((X_res.shape[0], X_res.shape[1]))
        #im_warp[:, :] = (1 - mask0) * cv2.remap(img, np.float32(X_res), np.float32(Y_res), cv2.INTER_LINEAR)
        im_warp[:, :] = cv2.remap(img, np.float32(X_res), np.float32(Y_res), cv2.INTER_LINEAR)
    else:  # 彩色图像
        im_warp = np.zeros((X_res.shape[0], X_res.shape[1], img.shape[2]))
        for ch in range(img.shape[2]):
            #im_warp[:, :, ch] = (1 - mask0) * cv2.remap(img[:, :, ch], np.float32(X_res), np.float32(Y_res), cv2.INTER_CUBIC)
            im_warp[:, :, ch] =  cv2.remap(img[:, :, ch], np.float32(X_res), np.float32(Y_res), cv2.INTER_CUBIC)

    return im_warp


def unwarp(img, UpSampFactor, rad, cent_x, cent_y, width_to_height=3):
    rad = rad * 1.414

    new_siz = np.ceil((2 * rad + 1) * UpSampFactor)

    X0, Y0 = np.meshgrid(np.arange(0, 288), np.arange(0, 352))
    X0 = (X0 - cent_x)
    Y0 = (Y0 - cent_y)

    s_new = np.sqrt(X0 ** 2 + Y0 ** 2)

    phi_new = np.angle(X0 + 1j * Y0)
    mask = (s_new > 0.707 * rad)

    s_new[s_new > 0.707 * rad] = 0

    rho_new = 2 * s_new / (2 * np.sqrt(rad ** 2 - s_new ** 2) - rad)

    X_res0 = rho_new * np.cos(phi_new)
    Y_res0 = rho_new * np.sin(phi_new)

    X_res1 = (1 + X_res0 / width_to_height) * new_siz / 2;
    Y_res1 = (1 + Y_res0 / width_to_height) * new_siz / 2;

    im_UN_wrap = np.zeros((X_res0.shape[0], X_res0.shape[1], img.shape[2]))

    for ch in range(img.shape[2]):
        im_UN_wrap[:, :, ch] = (1 - mask) * cv2.remap(img[:, :, ch], np.float32(X_res1), np.float32(Y_res1),
                                                      cv2.INTER_LINEAR)

    return im_UN_wrap


import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Dossier contenant les images d'entrée
input_dir = 'data\csl_sun_center'
# Dossier où enregistrer les images transformées
output_dir = 'data/csl_sun_center_unwrapped'

# Vérifie si le dossier de sortie existe, sinon le créer
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# Liste des fichiers dans le dossier d'entrée
image_files = [f for f in os.listdir(input_dir) if f.endswith(('.jpg', '.png', '.jpeg'))]

for idx, image_name in enumerate(image_files):
    # Construire le chemin complet de l'image d'entrée et de sortie
    input_image_path = os.path.join(input_dir, image_name)
    output_image_path = os.path.join(output_dir, f'unwrapped_{image_name}')
    
    print(f" Traitement de : {input_image_path}")

    # Vérifier si l'image existe
    if not os.path.exists(input_image_path):
        print(f"Erreur : Image '{input_image_path}' introuvable.")
        continue

    # Charger l'image
    img = cv2.imread(input_image_path, cv2.IMREAD_COLOR)
    
    if img is None:
        print(f"Erreur : Impossible de charger {input_image_path}")
        continue

    # Appliquer la transformation
    im_warp = warp(img, UpSampFactor=1)

    # Assurer que les valeurs sont dans l'intervalle [0, 255] et convertir en uint8
    im_warp = np.clip(im_warp, 0, 255).astype(np.uint8)

    # Sauvegarder l'image transformée
    plt.imsave(output_image_path, im_warp, cmap='gray')
    print(f"Image enregistrée : {output_image_path}")



print(" Traitement terminé pour toutes les images du dossier !")
